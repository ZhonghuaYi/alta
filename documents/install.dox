/**
\page install Install

<h2>Dependencies</h2>

ALTA is decomposed into three parts: the \ref core, \ref plugins, and \ref
commands. The third party dependencies of each part follow those rules:

 + The **core** depends only on Eigen library for its vector class.
 + **Plugins** depend on whatever library they need. The dependency of a particular plugin and how to install it must be provided in its documentation.
 + **Commands** only depend on the core and on OpenMP.

To ease the installation of ALTA, we provide scripts to install some of the
dependencies in the <em>$ALTA/external</em> directory. Each script is a python
script and has the form <i>obtain_{name}.py</i>. For example, to obtain the
Eigen library, the commands are:

	$ cd $ALTA/external
	$ python obtain_eigen.py

<h3>List of common plugin dependencies:</h3>
<ul>
	<li><a href="http://eigen.tuxfamily.org">Eigen</a> library 
	(for core and plugins). You will need a version >= 3.0 to have access
	to the Eigen implementation of Levenberg-Marquardt.</li>
	<li><a href="http://quadprog.sourceforge.net/">Quadprog++</a> library 
	(for \ref rational_fitter_quadprog, provided in the external directory)</li>
	<li><a href="http://www.mathworks.fr/products/matlab/">Matlab</a> with 
	the Engine library (for some plugins)</li>
	<li><a href="http://www.cgal.org"/>CGAL</a> library (for some plugins)</li>
	<li><a href="https://code.google.com/p/ceres-solver/">CERES</a> solver 
	library (for \ref nonlinear_fitter_ceres)</li>
	<li><a href="http://www.cs.ubc.ca/research/flann/">libFLANN</a> (for 
	the \ref data_interpolant plugin). Note that this library is available
	through Debian's packages and MacOS ports.</li>
</ul>

You can find more information on the dependencies in the \ref dependencies
page.



### Obtaining additional depedencies

#### Ubuntu/Debian

Most of the dependencies can be obtain using the 'apt-get' command from Ubuntu/Debian. Other dependencies are automatically obtained using the python scripts provided (see above).

 	$ sudo apt-get install libeigen3-dev libgomp1 libcgal-dev libflann-dev libopenexr-dev

#### OSX

We advise to install the MacPorts package manager.

	$ sudo port install libeigen3-dev libcgal-dev libflann-dev libopenexr-dev



### Cross platform

ALTA is developed as a cross platform library. However, we do not test it
against any possible combination of platform/compiler/architecture. The
latest version is regularly tested using *continuous integration*. See our
[Jenkins logs](https://ci.inria.fr/alta/).

Here is a  recap of the currently tested combinations:
<center>
<table>
	<tr>
		<td><b>OS</b></td>
		<td><b>Compiler</b></td>
		<td><b>Arch</b></td>
		<td><b>Status</b></td>
		<td><b>Remarks</b></td>
	</tr>
	<tr>
		<td>Debian 7.0</td>
		<td>GCC 4.7.2</td>
		<td>x86_64</td>
		<td>Works</td>
		<td></td>
	</tr>
	<tr>
		<td>OS X 10.9.1</td>
		<td>clang 500.2.79</td>
		<td>x86_64</td>
		<td>Works</td>
		<td>Matlab plugins are not tested on this configuration<br />
		</td>
	</tr>
	<tr>
		<td>Windows 7</td>
		<td>Visual Studio 2007</td>
		<td>x86_64</td>
		<td>Works</td>
		<td>Matlab plugins are not tested on this configuration<br />
		</td>
	</tr>
</table>
</center>



### Scons 

Using scons, the compilation of ALTA is straightforward:

	$ cd $ALTA
	$ scons --cfg=[filename]

You need to provide a system dependant configuration file. You will find
examples of such configuration files in the <em>$ALTA/configs/scons</em>
directory.  This compilation command automatically download the dependencies of
ALTA core and plugins. 

All the resulting elements of ALTA (binaries, dynamic and static libraries)
are outputted in: <em>$ALTA/sources/build</em> directory. The dependencies
(ipopt, ceres, nlopt, ...) will be compiled in the <em>$ALTA/external/build</em>
directory.


*/
