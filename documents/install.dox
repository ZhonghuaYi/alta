/**
\page install Install

<h2>Dependencies</h2>

ALTA is decomposed into three parts: the <b>core</b>, <b>plugins</b>, and
command line <b>softwares</b>. The third party dependencies of each part
follow those rules:
<ul>
	<li>The <b>core</b> depends only on Eigen library for its vector class</li>
	<li><b>Plugins</b> depend on whatever library they need. The dependency of
	a particular plugin and how to install it must be provided in its 
	documentation.</li>
	<li><b>Softwares</b> only depend on the core</li>
</ul>

To ease the installation of ALTA, we provide scripts to install some of the
dependencies in the <em>$ALTA/external</em> directory. Each script is a python
script and has the form <i>obtain_{name}.py</i>. For example, to obtain the
Eigen library, the commands are:

\verbatim
$ cd $ALTA/external
$ python obtain_eigen.py
\endverbatim

<b>Note: </b> if you plan to use <b>scons</b> to compile ALTA, those scripts
will be called automatically.

<h3>List of common plugin dependencies:</h3>
<ul>
	<li><a href="http://eigen.tuxfamily.org">Eigen</a> library 
	(for core and plugins). You will need a version >= 3.0 to have access
	to the Eigen implementation of Levenberg-Marquardt.</li>
	<li><a href="http://quadprog.sourceforge.net/">Quadprog++</a> library 
	(for \a rational_fitter_quadprog, provided in the external directory)</li>
	<li><a href="http://www.mathworks.fr/products/matlab/">Matlab</a> with 
	the Engine library (for some plugins)</li>
	<li><a href="http://www.cgal.org"/>CGAL</a> library (for some plugins)</li>
	<li><a href="https://code.google.com/p/ceres-solver/">CERES</a> solver 
	library (for \a nonlinear_fitter_ceres)</li>
	<li><a href="http://www.cs.ubc.ca/research/flann/">libFLANN</a> (for 
	the \a data_interpolant plugin). Note that this library is available
	through Debian's packages and MacOS ports.</li>
</ul>

You can find more information on the dependencies in the \ref dependencies
page.

<br />


<h2>Cross platform</h2>

ALTA is developed as a cross platform library. However, we do not test it
against any possible combination of platform/compiler/architecture. 
Here is a  recap of the currently tested combinations:

<center>
<table>
	<tr>
		<td><b>OS</b></td>
		<td><b>Compiler</b></td>
		<td><b>Arch</b></td>
		<td><b>Status</b></td>
		<td><b>Remarks</b></td>
	</tr>
	<tr>
		<td>Debian 7.0</td>
		<td>GCC 4.7.2</td>
		<td>x86_64</td>
		<td>Works</td>
		<td>Compiled using qmake</td>
	</tr>
	<tr>
		<td>OS X 10.9.1</td>
		<td>clang 500.2.79</td>
		<td>x86_64</td>
		<td>Works</td>
		<td>Matlab plugins are not tested on this configuration<br />
		Compiled using scons
		</td>
	</tr>
	<tr>
		<td>Windows 7</td>
		<td>Visual Studio 2007</td>
		<td>x86_64</td>
		<td>Works</td>
		<td>Matlab plugins are not tested on this configuration<br />
		Compiled using qmake
		</td>
	</tr>
</table>
</center>

<br />

<h2>Scons</h2>

Using scons, the compilation of ALTA is straightforward:

\verbatim
$ cd $ALTA
$ scons -i
\endverbatim

All the resulting elements of ALTA (binaries, dynamic and static libraries)
are outputted in: <em>$ALTA/sources/build</em> directory. The dependencies
(Eigen, ceres, ...) will be compiled in the <em>$ALTA/external/build</em>
directory.

<br />


<h2>Qmake</h2>

How to install the various components using <b>qmake</b>.

<h3>.prf files</h3>

Qt rely on user specified .prf files to look for external libraries.
.prf files describe where to find libraries' headers and shared objects
in a qmake fashion. Here is an example for the <i>quadprog.prf</i> file:

\verbatim
INCLUDEPATH += $(HOME)/Projects/alta/external/quadprog++
LIBS += -L$(HOME)/Projects/alta/build -lquadprog++
\endverbatim

ALTA rely on the user to specify a .prf file for each dependency. Major
ones are: eigen.prf, quadprog.prf, ceres.prf, cgal.prf, matlab.prf.

You need to set the environment variable QMAKEFEATURES to the directory
where you will be storing your .prf files. If you are not familiar with
this process, we advise to store your .prf files in the external directory
of ALTA.

<h3>Installation</h3>

Once you have the required libraries, the installation of the fitting
tools is straightforward. Assuming that the environment variable $ALTA
contains the path to the alta files:

\verbatim
$ cd $ALTA
$ qmake && make -i
\endverbatim

All the resulting elements (binaries, dynamic and static libraries)
are outputed in: <em>$ALTA/sources/build</em> directory.

<br />

*/
