/**
\page install Installing ALTA

## Downloading

To access the sources of ALTA, clone the public [Git][git] repository:

    $ git clone https://gforge.inria.fr/git/alta/alta.git

## Dependencies

ALTA consists of three parts: the \ref core, \ref plugins, and \ref
commands.  The core has a number of mandatory dependencies, while
plugins may have optional dependencies.

The mandatory dependencies are:

  + the [SCons][scons] build system;

  + a C++11 compiler, such as recent versions of [GCC][gcc] or [Clang][clang];

  + [Eigen][eigen] >= 3.0 (<tt>libeigen3-dev</tt> package on Debian and
    derivatives; <tt>libeigen3</tt> in MacPorts; <tt>eigen</tt> in
    Brew.)

Optional dependencies that will allow more plugins to be built include:

  + [pkg-config][pkgconfig] is optional but highly recommended on
    GNU/Linux and MacOS X to help find common dependencies and their
    compiler and linker flags;

  + [Quadprog++][quadprog], for \ref rational_fitter_quadprog; this one
    is shipped with ALTA in the <tt>external</tt> directory;

  + the [NlOpt][nlopt] non-linear optimization library
    (<tt>libnlopt-dev</tt> on Debian and derivatives);

  + the [IpOpt][ipopt] library for large-scale â€‹non-linear optimization
    (<tt>coinor-libipopt-dev</tt> on Debian and derivatives);

  + the [CERES][ceres] solver library, for \ref nonlinear_fitter_ceres;

  + the [OpenEXR][openexr] high-dynamic range file format library
  (<tt>libopenexr-dev</tt> on Debian and derivatives, <tt>openexr</tt> for <a href="http://www.macports.org/">MacPorts</a> and <a href="http://brew.sh/">Homebrew</a>);

  + [CGAL][cgal], for some plugins (<tt>libcgal-dev</tt> on Debian and
    derivatives);

  + [libFLANN][flann], for the \ref data_interpolant plugin
    (<tt>libflann-dev</tt> on Debian and derivatives, <tt>flann</tt> for <a href="http://www.macports.org/">MacPorts</a> and <a href="http://brew.sh/">Homebrew</a>);

  + [MATLAB][matlab] with the Engine library, for some plugins.

For your convenience, some of these dependencies are shipped with ALTA,
as noted above.  Others are automatically downloaded unless
<tt>--no-externals</tt> is passed to <tt>scons</tt> (see below.)

#### Note for Ceres installation for Debian/Ubuntu distribution
To improve the numerical stability of the different solvers, it is highly recommended to install the following packages:
 + <tt>libatlas-base-dev</tt>
 + <tt>libsuitesparse-dev</tt>





## Portability

ALTA is developed as a cross-platform library, with support for several
OSes (GNU/Linux, MacOS X, Microsoft Windows) and several C++ compilers
(GCC, Clang, MSVC).  ALTA is under [continuous
integration](https://ci.inria.fr/alta/), where several combinations are
tested.


## Building

To build ALTA, simply run [SCons][scons] from the top-level source
directory:

     $ scons

By default, the build system automatically checks whether the required
dependencies are met, and which of the optional dependencies are
available.  All the compilation byproducts go to the
<tt>sources/build</tt> sub-directory.

Some of the missing dependencies, such as NlOpt, IpOpt, and CERES, are
automatically downloaded from upstream when they are not found.  The
downloaded files are integrity-checked, and then the software is built
and installed under the <tt>external/build</tt> sub-directory of the
source tree.

This automatic behavior can be disabled by running:

    $ scons --no-externals

Lastly, the default settings of the build system, such as the compiler
being used and locations of libraries and headers, can be overridden in
a configuration file:

    $ scons --cfg=my-config.py

Here <tt>my-config.py</tt> must define SCons <em>construction
variables</em> in Python syntax.  The list of configuration variables
and their default values can be seen by running:

    $ scons --help

Examples of configuration files are provided under
<tt>configs/scons</tt>.


## Configuration of the environment

To have a direct access to ALTA's commands and plugins from the command line and from python, we recommend to use our environment setters scripts. On Linux/OSX, please source setpath.sh from the terminal:

    $ source setpath.sh

On MS Windows, please excecute the script setpath.bat from the command line:

    $ ./setpath.bat

Programs and plugins will be accessible from the command line without requiring to specify the absolute or relative path to your current position.


## Testing

ALTA comes with a test suite that can be run with:

    $ scons tests

This command should succeed (return an exit code of zero.)  If that is
not the case, please post the command output, the <tt>.log</tt> files
from the <tt>sources/tests</tt> directory, and the version of ALTA and
its dependencies to the [mailing
list](https://lists.gforge.inria.fr/mailman/listinfo/alta-devel).


[git]: http://git-scm.org/
[scons]: http://www.scons.org/
[gcc]: http://gcc.gnu.org/
[clang]: http://clang.llvm.org/
[eigen]: http://eigen.tuxfamily.org "Eigen"
[pkgconfig]: http://freedesktop.org/Software/pkgconfig
[quadprog]: http://quadprog.sourceforge.net/ "QuadProg++"
[nlopt]: http://ab-initio.mit.edu/nlopt/
[ipopt]: https://projects.coin-or.org/Ipopt
[openexr]: http://www.openexr.com
[matlab]: http://www.mathworks.fr/products/matlab/ "MATLAB"
[cgal]: http://www.cgal.org "CGAL"
[ceres]: https://code.google.com/p/ceres-solver/ "CERES solver"
[flann]: http://www.cs.ubc.ca/research/flann/ "FLANN"
*/
