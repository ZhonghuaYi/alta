/*!
\page format Format

_Warning: this document is currently not up to date and should not be followed._


Common notations
----------------

Data and function files have the same format. They are text file very close to dump.
Each file starts with a header containing information about the input and output space described. Every header line starts by a '#' symbol. The following information are described:

 - Whether the file describe a function or a data,
 - Command line used to generate the file (optional),
 - Input and output domain dimensions,
 - Input domain parametrization,
 - And output domain parametrization.

Here is an exemple of a BRDF header:

    #ALTA FUNC HEADER
    #CMD  --L2 0.0282467 --Linf 0.0935969 --fitter ./librational_fitter_parallel.dylib --input ../../data/1d/NIST/Kirby2/Kirby2.dat --output ../Kirb2.brdf
    #DIM 1 1
    #PARAM_IN   UNKNOWN_INPUT
    #PARAM_OUT  UNKNOWN_OUTPUT
    #ALTA HEADER END


Parametrization format
----------------------

 - `#PARAM_IN   input_parametrization_name`
 - `#PARAM_OUT  output_parametrization_name`
 

Input Parametrization
---------------------

ALTA can automaticaly convert samples (either data sample or BRDF evaluation)
into a different coordinate system.
[Here](classparams.html#af530b9dd3ed0c1117aef8dd3159e3080) is the list of all
input parametrizations.


Output Parametrization
----------------------

In the current version of ALTA, we cannot handle different output 
parametrizations (like LAB color space). Fitting will be performed
independantly of the data and function output space. They only need
to match in size.

\verbatim
	INV_STERADIAN, // A BRDF which unit is sr^{-1}
	INV_STERADIAN_COSINE_FACTOR, // A BRDF multiplied by the cosine factor, unit is still sr^{-1} 
\endverbatim


<h2>Input file format</h2>

For a text data file with <em>n</em> data entries where the input domain has <em>N</em> dimensions and a <em>input_param</em> parametrization and the output domain has <em>P</em> dimensions and a <em>output_param</em> parametrization, our file format is the following:

\verbatim
#ALTA DATA HEADER
#DIM N P 
#PARAM_IN  %input_param%
#PARAM_OUT %output_param%
#VS [0|1|2] (P times)
#ALTA HEADER END
x_{1,1} ... x_{1,N}  y_{1,1} ... y_{1,P}
...
x_{i,1} ... x_{i,N}  y_{i,1} ... y_{i,P}
...
x_{n,1} ... x_{n,N}  y_{n,1} ... y_{n,P}
\endverbatim

Vertical segments are not defined if VS is 0. For a VS of 1, each sample as a radius associated for the associated dimension. If VS is 2, each sample has a min and max segment value for the associated dimension.

 



<h2>Function file format</h2>

ALTA library assumes that all functions are exported using the following convention:

<ul>
	<li>The *.function file is outputed in plain text and not in binary.</li>
	<li>The *.function file starts with a header. Each line of the header 
	starts with the character '#'.</li>
	<li>The header contains the command line used to create the function
	in a <em>#CMD ...</em> line.
	<li>If there are multiple color channels to the function, they
	are enumerated in the file, one color channel by one.</li>
</ul>

Example of a *.function file for a single Lafortune lobe without any diffuse:
\verbatim
   #ALTA_HEADER_DATA
   #CMD lafortune --nb_lobes 1 --isotrope
   #DIM 2 1
   #PARAM_IN  CARTESIAN
   #PARAM_OUT ENERGY
   #ALTA_HEADER_END

   #FUNC lafortune
   Cx 1.0
   Cz 1.0
   N  10.0 
\endverbatim

For multiple BRDFs lobes (when you want to add a diffuse for example), you need to 
specify it into the command line. The different parameters are outputed sequentially
into the file:
\verbatim
   #ALTA_HEADER_FUNC
   #CMD [diffuse, lafortune --nb_lobes 1 --isotrope, phong --fresnel schlick]
   #DIM 2 3
   #PARAM_IN  CARTESIAN
   #PARAM_OUT RGB_COLOR
   #ALTA_HEADER_END

   #FUNC diffuse 
   kd 1.0
   kd 0.02
   kd 0.1We advise to output function file into <em>.function</em> file for consistency.

   #FUNC lafortune
   Cx 1.0
   Cz 1.0
   N  10.0 
   Cx 1.0
   Cz 1.0
   N  10.0 
   Cx 1.0
   Cz 1.0
   N  10.0 

   #FUNC phong
   ks 1.0
   N  10.0 
   ks 1.0
   N  10.0 
   ks 1.0
   N  10.0 

   #FUNC schlick
   R 1.0
   R 1.0
   R 1.0
\endverbatim

\todo Right now the different color channels have the same length !


<h2>XML scripts</h2>

You can create XML formated files to run ALTA complex commands. A python
script <em>xml_cmd.py</em> is available in the directory <em>scripts</em>.
You can use it with the following command: <em>./scripts/xml_cmd.py 
file.xml</em>

We provide an example XML file that is self describing:
\verbatim
<?xml version="1.0"?>
<alta>
	<!-- In the configuration you can setup the relative directories -->
	<configuration>
		<parameter name="lib-dir" value="./build" />
	</configuration>

	<!-- Fit the data to a BRDF model -->
	<!-- You can chain as many action as you want to perform fit. Convert
        data, output to matlab/gnuplot/BRDFExplorer format -->
	<action name="data2brdf">

		<!-- Input and output arguments of the action -->
		<input name="/home/belcour/Projects/alta/data/2d/matusik_merl/blue-metallic-paint-double-mean-romeiro-80deg.dat" />
		<output name="./results/blue-metallic-paint-2lafortune.brdf" />

		<!-- Define the function to use -->
		<!-- You can chain multiple functions here to create a compound -->
		<function name="nonlinear_function_diffuse" />
		<function name="nonlinear_function_isotropic_lafortune" />

		<!-- Define the ftting procedure to use -->
		<plugin type="fitter" name="nonlinear_fitter_ceres" />

		<!-- Fitting parameters -->
		<parameter name="max" value="[0.8, 0.8]" />
	</action>
	
	<!-- Convert the fit to BRDF explorer format -->
	<action name="brdf2brdf">
		
		<!-- Input and output arguments of the action -->
		<input  name="./results/blue-metallic-paint-2lafortune.brdf" />
		<output name="./results/blue-metallic-paint-2lafortune_explorer.brdf" />

		<parameter name="export" value="explorer" />
	</action>
	
	<!-- Export the fit -->
	<action name="brdf2gnuplot">
		
		<!-- Input and output arguments of the action -->
		<input  name="./results/blue-metallic-paint-2lafortune.brdf" />
		<output name="./results/blue-metallic-paint-2lafortune.dat" />

		<parameter name="data" value="/home/belcour/Projects/alta/data/2d/matusik_merl/blue-metallic-paint-double-mean-romeiro-80deg.dat" />
	</action>
</alta>
\endverbatim

The `<input>` command can take two different kind of attributes:
 + `name="filename"` when the action is done for a single input file.
 + `directory="dirname"` when all file withing 'dirname' must be processed using the current action.
*/
