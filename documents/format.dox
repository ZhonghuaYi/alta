/*!
\page func-format Function file format

ALTA library assumes that all functions are exported using the following convention:

<ul>
	<li>The *.function file is outputed in plain text and not in binary.</li>
	<li>The *.function file starts with a header. Each line of the header
	starts with the character '#'.</li>
	<li>The header contains the command line used to create the function
	in a <em>#CMD ...</em> line.
	<li>If there are multiple color channels to the function, they
	are enumerated in the file, one color channel by one.</li>
</ul>

Example of a *.function file for a single Lafortune lobe without any diffuse:
\verbatim
   #ALTA_HEADER_DATA
   #CMD lafortune --nb_lobes 1 --isotrope
   #DIM 2 1
   #PARAM_IN  CARTESIAN
   #PARAM_OUT ENERGY
   #ALTA_HEADER_END

   #FUNC lafortune
   Cx 1.0
   Cz 1.0
   N  10.0
\endverbatim

For multiple BRDFs lobes (when you want to add a diffuse for example), you need to
specify it into the command line. The different parameters are outputed sequentially
into the file:
\verbatim
   #ALTA_HEADER_FUNC
   #CMD [diffuse, lafortune --nb_lobes 1 --isotrope, phong --fresnel schlick]
   #DIM 2 3
   #PARAM_IN  CARTESIAN
   #PARAM_OUT RGB_COLOR
   #ALTA_HEADER_END

   #FUNC diffuse
   kd 1.0
   kd 0.02
   kd 0.1We advise to output function file into <em>.function</em> file for consistency.

   #FUNC lafortune
   Cx 1.0
   Cz 1.0
   N  10.0
   Cx 1.0
   Cz 1.0
   N  10.0
   Cx 1.0
   Cz 1.0
   N  10.0

   #FUNC phong
   ks 1.0
   N  10.0
   ks 1.0
   N  10.0
   ks 1.0
   N  10.0

   #FUNC schlick
   R 1.0
   R 1.0
   R 1.0
\endverbatim

\todo Right now the different color channels have the same length !


\page xml-format XML scripts

You can create XML formated files to run ALTA complex commands. A python
script <em>xml_cmd.py</em> is available in the directory <em>scripts</em>.
You can use it with the following command: <em>./scripts/xml_cmd.py
file.xml</em>

We provide an example XML file that is self describing:
\verbatim
<?xml version="1.0"?>
<alta>
	<!-- In the configuration you can setup the relative directories -->
	<configuration>
		<parameter name="lib-dir" value="./build" />
	</configuration>

	<!-- Fit the data to a BRDF model -->
	<!-- You can chain as many action as you want to perform fit. Convert
        data, output to matlab/gnuplot/BRDFExplorer format -->
	<action name="data2brdf">

		<!-- Input and output arguments of the action -->
		<input name="/home/belcour/Projects/alta/data/2d/matusik_merl/blue-metallic-paint-double-mean-romeiro-80deg.dat" />
		<output name="./results/blue-metallic-paint-2lafortune.brdf" />

		<!-- Define the function to use -->
		<!-- You can chain multiple functions here to create a compound -->
		<function name="nonlinear_function_diffuse" />
		<function name="nonlinear_function_isotropic_lafortune" />

		<!-- Define the ftting procedure to use -->
		<plugin type="fitter" name="nonlinear_fitter_ceres" />

		<!-- Fitting parameters -->
		<parameter name="max" value="[0.8, 0.8]" />
	</action>

	<!-- Convert the fit to BRDF explorer format -->
	<action name="brdf2brdf">

		<!-- Input and output arguments of the action -->
		<input  name="./results/blue-metallic-paint-2lafortune.brdf" />
		<output name="./results/blue-metallic-paint-2lafortune_explorer.brdf" />

		<parameter name="export" value="explorer" />
	</action>

	<!-- Export the fit -->
	<action name="brdf2gnuplot">

		<!-- Input and output arguments of the action -->
		<input  name="./results/blue-metallic-paint-2lafortune.brdf" />
		<output name="./results/blue-metallic-paint-2lafortune.dat" />

		<parameter name="data" value="/home/belcour/Projects/alta/data/2d/matusik_merl/blue-metallic-paint-double-mean-romeiro-80deg.dat" />
	</action>
</alta>
\endverbatim

The `<input>` command can take two different kind of attributes:
 + `name="filename"` when the action is done for a single input file.
 + `directory="dirname"` when all file withing 'dirname' must be processed using the current action.
*/
