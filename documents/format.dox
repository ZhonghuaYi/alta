/*!
\page format Format

<h2>Common notations</h2>

Data and function files have the same format. They are text file very close to dump.
Each file starts with a header containing :

<h3> Parametrization format </h3>

<ul>
 <li> \verbatim #PARAM_IN   input_parametrization_name  \endverbatim </li>
 <li> \verbatim #PARAM_OUT  output_parametrization_name \endverbatim </li>
</ul>
 

<h3>Input Parametrization</h3>

ALTA can automaticaly convert samples (either data sample or BRDF 
evaluation) into a different coordinate system. Here is a non-complete
list of possible parametrizations:

\verbatim
	RUSIN_TH_PH_TD,
	RUSIN_TH_TD_PD,
	RUSIN_TH_PH_TD_PD,
	COS_TH_TD, // cosine theta_h, cosine theta_d
	ISOTROPIC_TV_TL_DPHI, // isotropic formulation with theta view, theta light and |dphi|
	CARTESIAN, // 6D (directions: 3d + 3d)
	SPHERICAL_TL_PL_TV_PV
	ISOTROPIC_TV_PROJ_DPHI  //2D Param. (theta_v * cos(|\delta \Phi|), theta_v * sin(|\delta \Phi)|)
\endverbatim

<h3> Output Parametrization </h3>

In the current version of ALTA, we cannot handle different output 
parametrizations (like LAB color space). Fitting will be performed
independantly of the data and function output space. They only need
to match in size.

<h2>Input file format</h2>

For a text data file with <em>n</em> data entries where the input domain has <em>N</em> dimensions and a <em>input_param</em> parametrization and the output domain has <em>P</em> dimensions and a <em>output_param</em> parametrization, our file format is the following:

\verbatim
#DIM N P 
#PARAM_IN  %input_param%
#PARAM_OUT %output_param%
#VS [0|1|2] (P times)
x_{1,1} ... x_{1,N}  y_{1,1} ... y_{1,P}
...
x_{i,1} ... x_{i,N}  y_{i,1} ... y_{i,P}
...
x_{n,1} ... x_{n,N}  y_{n,1} ... y_{n,P}
\endverbatim

Vertical segments are not defined if VS is 0. For a VS of 1, each sample as a radius associated for the associated dimension. If VS is 2, each sample has a min and max segment value for the associated dimension.

 



<h2>Function file format</h2>

ALTA library assumes that all functions are exported using the following convention:

<ul>
	<li>The *.function file is outputed in plain text and not in binary.</li>
	<li>The *.function file starts with a header. Each line of the header 
	starts with the character '#'.</li>
	<li>The header contains the command line used to create the function
	in a <em>#CMD ...</em> line.
	<li>If there are multiple color channels to the function, they
	are enumerated in the file, one color channel by one.</li>
</ul>

Example of a *.function file for a single Lafortune lobe without any diffuse:
\verbatim
   #ALTA_HEADER_DATA
   #CMD lafortune --nb_lobes 1 --isotrope
   #DIM 2 1
   #PARAM_IN  CARTESIAN
   #PARAM_OUT ENERGY
   #ALTA_HEADER_END

   #FUNC lafortune
   Cx 1.0
   Cz 1.0
   N  10.0 
\endverbatim

For multiple BRDFs lobes (when you want to add a diffuse for example), you need to 
specify it into the command line. The different parameters are outputed sequentially
into the file:
\verbatim
   #ALTA_HEADER_FUNC
   #CMD [diffuse, lafortune --nb_lobes 1 --isotrope, phong --fresnel schlick]
   #DIM 2 3
   #PARAM_IN  CARTESIAN
   #PARAM_OUT RGB_COLOR
   #ALTA_HEADER_END

   #FUNC diffuse 
   kd 1.0
   kd 0.02
   kd 0.1We advise to output function file into <em>.function</em> file for consistency.

   #FUNC lafortune
   Cx 1.0
   Cz 1.0
   N  10.0 
   Cx 1.0
   Cz 1.0
   N  10.0 
   Cx 1.0
   Cz 1.0
   N  10.0 

   #FUNC phong
   ks 1.0
   N  10.0 
   ks 1.0
   N  10.0 
   ks 1.0
   N  10.0 

   #FUNC schlick
   R 1.0
   R 1.0
   R 1.0
\endverbatim

\todo Right now the different color channels have the same length !


<h2>XML scripts</h2>

You can create XML formated files to run ALTA complex commands. A python
script <em>xml_cmd.py</em> is available in the directory <em>scripts</em>.
You can use it with the following command: <em>./scripts/xml_cmd.py 
file.xml</em>

We provide an example XML file that is self describing:
\verbatim
<?xml version="1.0"?>
<alta>
	<!-- In the configuration you can setup the relative directories -->
	<configuration>
		<parameter name="lib-dir" value="./build" />
	</configuration>

	<!-- Fit the data to a BRDF model -->
	<!-- You can chain as many action as you want to perform fit. Convert
        data, output to matlab/gnuplot/BRDFExplorer format -->
	<action name="data2brdf">

		<!-- Input and output arguments of the action -->
		<input name="/home/belcour/Projects/alta/data/2d/matusik_merl/blue-metallic-paint-double-mean-romeiro-80deg.dat" />
		<output name="./results/blue-metallic-paint-2lafortune.brdf" />

		<!-- Define the function to use -->
		<!-- You can chain multiple functions here to create a compound -->
		<function name="nonlinear_function_diffuse" />
		<function name="nonlinear_function_isotropic_lafortune" />

		<!-- Define the ftting procedure to use -->
		<plugin type="fitter" name="nonlinear_fitter_ceres" />

		<!-- Fitting parameters -->
		<parameter name="max" value="[0.8, 0.8]" />
	</action>
	
	<!-- Convert the fit to BRDF explorer format -->
	<action name="brdf2brdf">
		
		<!-- Input and output arguments of the action -->
		<input  name="./results/blue-metallic-paint-2lafortune.brdf" />
		<output name="./results/blue-metallic-paint-2lafortune_explorer.brdf" />

		<parameter name="export" value="explorer" />
	</action>
	
	<!-- Export the fit -->
	<action name="brdf2gnuplot">
		
		<!-- Input and output arguments of the action -->
		<input  name="./results/blue-metallic-paint-2lafortune.brdf" />
		<output name="./results/blue-metallic-paint-2lafortune.dat" />

		<parameter name="data" value="/home/belcour/Projects/alta/data/2d/matusik_merl/blue-metallic-paint-double-mean-romeiro-80deg.dat" />
	</action>
</alta>
\endverbatim
*/
