/*!
\page tutorials Tutorials

The following examples use a Linux syntax for the command lines and name of
the shared objects. Command lines work when translated to Windows' or
OSX's format.

<br />

<h2>Fitting using the command line</h2>

<h3>1D Rational interpolation</h3>
The \a data2brdf allows to perform a fitting procedure by converting a \ref
data object into a brdf object (also named \ref function).

First, download the Kirby2 dataset in ALTA format: <a href="http://alta.gforge.inria.fr/data/Kirby2.dat">Kirby2.dat</a>. Save this file in <i>$ALTA/data/1d/NIST/Kirby2</i>.

\verbatim
 $ ./build/data2brdf --input ../data/1d/NIST/Kirby2/Kirby2.dat --output Kirby.brdf --fitter ./build/librational_fitter_eigen.so
\endverbatim

The result can be exported using the \a brdf2data commands.

\verbatim
 $ ./build/data2gnuplot --input Kirby.brdf --output Kirby.dat --in-data ../data/1d/NIST/Kirby2/Kirby2.dat
\endverbatim

The \a brdf2data allows you to export a function into a data file. If no data plugin is specified, the ALTA format is used which is gnuplot compliant. The position of evaluation for the function are taken from a specified data file (here the original Kirby2 file).

You should obtain gnuplot data files like the following image:

\image html Kirby2.png

To convert this brdf file to be used in another software (here matlab),
you will need the following command:
\verbatim
 $ ./build/brdf2brdf --input Kirby.brdf --output Kirby.m --export matlab
\endverbatim

\a brdf2brdf converts an ALTA brdf file into another format such as
Matlab m file, C++ code, or BRDF Explorer shader. Note that this tool cannot
convert to another ALTA file (e.g. converting a Blinn lobe to a Beckmann
distribution).

<br />

<h3>2D Rational interpolation of BRDFs</h3>

In this example, we will show how to perform data conversion and vertical segments interpolation of the <em>gold-metallic-paint</em> material from the MERL database using the command line programs on an OSX platform. First download the binary file <a href="http:///">gold-met.binary</a> and copy it to the <em>$ALTA/data/3d/merl</em> directory.

The first command we will execute will convert the three dimensional data in a 2D slice in the halfway vector parametrization:
\verbatim
 $ ./build/data2data --input ../data/3d/merl/gold-met.binary --in-data ./build/libdata_merl.dylib --output ../data/2d/merl/gold-met.exr --out-data ./build/libdata_brdf_slice.dylib
\endverbatim

The \a data_merl plugin permits to represent BRDF slices using HDR image files (.exr format). The output of this command should look like:

\image html gold-met-merl.png "gold-metallic-paint slice"

Then, we perform fitting of this 2D BRDF slice:
\verbatim
 $ ./build/data2brdf --input ../data/2d/merl/gold-met.exr --data ./build/libdata_brdf_slice.dylib --output gold-met.brdf --fitter ./build/librational_fitter_parallel.dylib --func ./build/librational_function_chebychev.dylib --min-np 60 -- np 100
\endverbatim

This outputs a BRDF file which cannot be displayed directly. To seen the result of our fitting, we can export this BRDF into the BRDF image slice format:
\verbatim
 $ ./build/brdf2data --input gold-met.brdf --output gold-met-rat.exr --data ./build/libdata_brdf_slice.dylib
\endverbatim

It is now possible to perform side by side comparison of the original data, and the interpolated rational function:

<center>
  <table  border="0" style='text-align:center'>
  <tr>
    <td>
      \image html gold-met-merl.png "gold-metallic-paint slice"
    </td>
    <td>
      \image html gold-met-rat.png "gold-metallic-paint slice fitting using R-BRDFs"
    </td>
  </tr>
  </table>
</center>

<br />

<h3>Non-linear fitting</h3>
In this example, we use Google's <a href="http://code.google.com/p/ceres-solver/">CERES</a> nonlinear fitter to approximate the
blue metallic paint from the <a href="http://www.merl.com/brdf/">MERL database</a> using a Lafortune lobe (Note that we do not provide the data in ALTA package, you will have to download it). The resulting BRDF is exported in a shader format compatible with BRDF Explorer.

\verbatim
 $ ./build/data2brdf --data ./build/libdata_merl.so --input ../data/3d/merl/blue-metallic-paint.binary --output blue-met.brdf --fitter ./build/libnonlinear_fitter_ceres.so --func ./build/libnonlinear_function_lafortune.so  --export explorer
\endverbatim

This command line is rather long. To help you design complex command line in a more intuitive way, ALTA comes with a python script that creates command lines from XML files (see \ref format for an example).

<br />

<h3>XML scripts</h3>

Here is the script to perform the same fitting as the previous example. It
performs the fitting of the blue metallic paint from the MERL database using
a Beckmann lobe (note there is no shadowing term, nor Fresnel term):

\verbatim
<?xml version="1.0"?>
<alta>
	<configuration>
		<parameter name="lib-dir" value="./build" />
	</configuration>

	<action name="data2brdf">
		<!-- Input and output arguments of the action -->
		<input  name="../data/3d/merl/blue-metallic-paint.binary" />
		<output name="./results/3d/merl/blue-mettalic-paint.brdf" />

		<!-- Define the function to use -->
		<function name="nonlinear_function_diffuse" />
		<function name="nonlinear_function_beckmann">
		</function>

		<!-- Define the ftting procedure to use -->
		<plugin type="fitter" name="nonlinear_fitter_ceres" />

		<!-- Define the data loader to use -->
		<plugin type="data" name="data_merl" />

		<!-- Parameter -->
		<parameter name="export" value="explorer" />
	</action>
</alta>
\endverbatim

You can perform this action using the following command, assuming that the
xml script is in file <em>script.xml</em>:
\verbatim
 $ ./scripts/xml_cmd.py script.xml
\endverbatim

You can put multiple <action> commands in the xml file. Those commands will
be executed in order.

<br />

<h2>Moment analysis using the command line</h2>

The \a data2moment allows to perform a moment analysis on a \ref data object.
It can be useful to determine whether a given data correspond to a separable
function along its different axis.

\verbatim
 $ ./build/data2moments --input ../data/1d/NIST/Kirby2/Kirby2.dat --data ./build/libdata_interpolant.so
\endverbatim
*/
