import os
import shutil

#Import('env', 'CheckPKG')
Import('env')
env = env.Clone()

if env.GetOption('clean'):
	print "Removing all the third party packages"

	# Removing the output build directory
	#shutil.rmtree('build', True)

	# Removing the TP directories
	#shutil.rmtree('ceres-solver-1.7.0', True)
	#shutil.rmtree('eigen-eigen-ffa86ffb5570', True)
	#shutil.rmtree('glog-0.3.3', True)
	#shutil.rmtree('Ipopt-3.11.8', True)
	#shutil.rmtree('nlopt-2.4.1', True)
	
else:
        ##
        # Check for optional dependencies, downloading them if they
        # are not already available in the user's environment.
        #
        # At this point CCFLAGS and LINKFLAGS already contain the
        # right flags if those dependencies if they found via
        # 'pkg-config'.  Check whether they are usable, and download
        # them if not.
        #
        ##
        # The line below should only be used on Unices
        # conf = Configure(env, custom_tests = { 'CheckPKG' : CheckPKG })
        # 
	# FOR NOW I AM COMMENTING IT but this is the spirit ...
	#if( env['PLATFORM'].startswith('win' ):
	#else:
	#	conf = Configure(env, custom_tests = { 'CheckPKG' : CheckPKG })

	conf = Configure(env)

	##
	#   IpOpt dependencies
	##
	execfile('obtain_ipopt.py')

	##
	#   NlOpt dependencies
	##
  # if conf.CheckPKG('nlopt >= 2.4.1'):
	#         env.ParseConfig('pkg-config --cflags --libs nlopt')
	if not conf.CheckLibWithHeader('nlopt', 'nlopt.hpp', 'c++'):
		execfile('obtain_nlopt.py')
	
	##
	#   Eigen dependencies
	##
        # if conf.CheckPKG('eigen3 >= 3.2.0'):
        #         env.ParseConfig('pkg-config --cflags --libs eigen3')

	if not conf.CheckCXXHeader('Eigen/Core'):
		execfile('obtain_eigen.py')

	env = conf.Finish()

	##
	#   CERES dependencies
	##
	if 'CERES_INC' in env:
		if env['CERES_INC'] == ['#external/build/include'] and env['CERES_DIR'] == ['#external/build/lib']:
			execfile('obtain_ceres.py')
		#end
	else:
		execfile('obtain_ceres.py')
	#end
	
	print "<<INFO>> External libraries are compiled as shared libraries."
	print "<<INFO>> Please update your environment variable before running ALTA commands."

	##
	#   QuadProg++
	##
	qp_target  = 'build' + os.sep + 'lib' + os.sep + 'quadprog++'
	qp_base    = 'quadprog++' + os.sep
	qp_sources = [qp_base + 'Array.cc', qp_base + 'QuadProg++.cc']
	env.Append(CPPPATH = ['build' + os.sep + 'include'])

        if env['CC'] != 'cl':
                # We're not building a real static library, but rather what
                # Libtool calls a "convenience library": an archive that
                # contains PIC code.  Thus, force '-fPIC'.
                env.AppendUnique(CCFLAGS = ['-fPIC'])

	env.StaticLibrary(target = qp_target, source = qp_sources)

#end


