import os, sys
from os.path import basename, splitext

Import('env', 'ALTA_LIBS')
env = env.Clone()

# Add the directory of <tests.h> to the include path.
env.AppendUnique(CPPPATH = ['#sources/tests'])

env.Prepend(LIBS = ['core'])
env.AppendUnique(LIBS = ALTA_LIBS)

# Data files used by the tests.
test_file = File('Kirby2.dat').srcnode().abspath
test_data_directory = os.path.dirname(test_file)

def executable(file):
	'''Append '.exe' to FILE if needed.'''
	if sys.platform.startswith('win'):
		return file + '.exe'
	else:
		return file

# Inspired by <http://www.scons.org/wiki/UnitTests>.
def run_unit_test(env, target, source):
	program = str(source[0].abspath)
	envvars = os.environ
	envvars['TEST_DATA_DIRECTORY'] = test_data_directory

	if os.spawnle(os.P_WAIT, program, program, envvars) == 0:
		open(str(target[0]),'w').write("PASS\n")
	else:
		open(str(target[0]),'w').write("FAIL\n")
		return 1

def make_test_alias(source):
	program = 'build/' + splitext(basename(source))[0]
	env.Alias('tests', env.Program(program, source))
	env.Alias('tests', env.Command(basename(program) + '.passed',
																 executable(program),
																 run_unit_test))

TESTS = [ 'params/half-test-1.cpp',
					'params/half-test-2.cpp',
					'params/half-test-3.cpp',
					'params/params-test-1.cpp',
					'data-io.cpp' ]

for test in TESTS:
	make_test_alias(test)
