import os, sys
from subprocess import call
from os.path import basename, splitext

import obtain

Import('env', 'ALTA_LIBS', 'openexr_available')
env = env.Clone()

have_openexr = openexr_available(env)
conf = Configure(env)
have_cppquickcheck = conf.CheckLibWithHeader('cppqc', 'cppqc.h', 'C++')
env = conf.Finish()

# Add the directory of <tests.h> to the include path.
env.AppendUnique(CPPPATH = ['#sources/tests'])

env.Prepend(LIBS = ['core'])
env.AppendUnique(LIBS = ALTA_LIBS)

# Portability.
def library_search_path_variable():
  """
  Return the name of the search path environment variable for shared
  libraries.

  """
  if sys.platform.startswith('win'):
    return 'PATH'
  elif sys.platform.startswith('darwin'):
    return 'DYLD_LIBRARY_PATH'
  else:
    return 'LD_LIBRARY_PATH'

# Data files used by the tests.
test_file = File('Kirby2.dat').srcnode().abspath
test_data_directory = os.path.dirname(test_file)

# Directory for the files produced by the tests.
test_output_directory = Dir('#sources/tests/build').abspath

def test_byproduct(file):
  """Return the absolute file name of FILE, a file produced by a test."""
  return test_output_directory + os.sep + file


def executable(file):
   '''Append '.exe' to FILE if needed.'''
   if sys.platform.startswith('win'):
      return file + '.exe'
   else:
      return file

def build_environment_variables():
  """
  Return the environment variables necessary when running tests.
  """
  envvars = os.environ.copy()
  envvars['TEST_DATA_DIRECTORY'] = test_data_directory
  envvars['PYTHONPATH'] = Dir('#sources/build').abspath
  envvars['ALTA_LIB'] = Dir('#sources/build').abspath;

  libdir = Dir('#sources/build').abspath
  lib_path_var = library_search_path_variable()
  lib_path = ""
  if lib_path_var in envvars and envvars[lib_path_var] != '':
    lib_path = libdir + os.pathsep + lib_path
  else:
    lib_path = libdir

  envvars[lib_path_var] = lib_path

  return envvars

# Inspired by <http://www.scons.org/wiki/UnitTests>.
def run_unit_test(env, target, source):
   program = str(source[0].abspath)
   envvars = build_environment_variables()

   with open(str(target[0]),'w') as log:
     log.write(str(envvars) + '\n')
     if splitext(program)[1] == '.py':
       command = env['PYTHON'] + ' ' + program
       if call([env['PYTHON'], program], env=envvars) == 0:
         log.write("PASS: " + command + "\n")
         return 0
       else:
         log.write("FAIL: " + command + "\n")
         return 1
     else:
       if os.spawnle(os.P_WAIT, program, program, envvars) == 0:
         log.write("PASS: " + program + "\n")
         return 0
       else:
         log.write("FAIL: " + program + "\n")
         return 1

def run_command(arguments):
  """Return a function that runs SOURCE with ARGUMENTS."""
  def do_run_command(env, target, source):
    program = str(source[0].abspath)
    envvars = build_environment_variables()

    status = os.spawnve(os.P_WAIT, program, [program] + arguments, envvars)
    command = ' '.join([program] + arguments)
    with open(str(target[0]), 'w') as log:
      log.write(str(envvars) + '\n');
      if status == 0:
        log.write("PASS: '" + command + "' succeeded\n")
      else:
        log.write("FAIL: '" + command + "' returned " + str(status) + '\n')
        return 1

  return do_run_command

def run_dash_dash_help(env, target, source):
  """Run SOURCE with '--help'."""
  program = str(source[0].abspath)
  pipe = os.popen(program + " --help")

  seen_usage = False
  for line in pipe:
    if line.startswith('Usage: '):
      seen_usage = True

  status = pipe.close()
  if status == None:
    if seen_usage:
      with open(str(target[0]),'w') as log:
        log.write("PASS: congrats!\n")
      return 0
    else:
      with open(str(target[0]),'w') as log:
        log.write("FAIL: '" + program + "' lacks usage string\n")
      return 1
  else:
    with open(str(target[0]),'w') as log:
      log.write("FAIL: '" + program + " --help' returned "
                + str(status) + "\n")
    return 2

def make_cxx_test_alias(source):
  program = 'build/' + splitext(basename(source))[0]
  command = env.Command(basename(program) + '.log',
                        executable(program),
                        run_unit_test)
  AlwaysBuild(command)
  env.Alias('tests', env.Program(program, source))
  env.Alias('tests', command)

def make_help_test_alias(program):
  """Add a test that checks the '--help' output of PROGRAM."""
  command = env.Command(basename(program) + '.help.log',
                        executable("#sources/build/" + program),
                        run_dash_dash_help)
  AlwaysBuild(command)
  env.Alias('tests', command)

def make_command_test(program, arguments, identifier):
  """Add a test that invokes PROGRAM with ARGUMENTS."""
  return env.Command(basename(program) + '.' + identifier + '.log',
                     executable("#sources/build/" + program),
                     run_command(arguments))

def make_test_python(script):
   command = env.Command(basename(splitext(script)[0])+ '.log',
                         script, run_unit_test)
   AlwaysBuild(command)
   env.Alias('tests', command)

UTILITIES = [ 'data2data', 'data2brdf', 'brdf2data', 'fit2stat',
              'brdf2brdf', 'brdf2data', 'brdf2gnuplot' ]

CXX_TESTS = [ 'core/half-test-1.cpp',
              'core/half-test-2.cpp',
              'core/half-test-3.cpp',
              'core/half-test-4.cpp',
              'core/params-test-1.cpp',
              'core/data-io.cpp' ]

# Optionally, built the CppQuickCheck tests.
if have_cppquickcheck:
  CXX_TESTS += [ 'core/params-qc-1.cpp' ]
  env.AppendUnique(LIBS = ['cppqc'])


PYTHON_TESTS = [ 'python/test-python-function.py' ]

for test in CXX_TESTS:
  make_cxx_test_alias(test)

for command in UTILITIES:
  make_help_test_alias(command)

if 'python' in COMMAND_LINE_TARGETS:
   for test in PYTHON_TESTS:
      make_test_python(test)

# Make sure commands from the tutorials actually work.

cmd1 = make_command_test('data2brdf', [ '--input', test_file, '--output',
                                        test_byproduct('Kirby.brdf'),
                                        '--fitter', 'rational_fitter_eigen' ],
                         'rational-fitter-eigen')
AlwaysBuild(cmd1)
env.Alias('tests', cmd1)

cmd2 = make_command_test('brdf2data', [ '--input',
                                        test_byproduct('Kirby.brdf'),
                                        '--output',
                                        test_byproduct('Kirby.dat'),
                                        '--data-file', test_file ],
                         'data-file')
env.Depends(cmd2, cmd1)         # 'Kirby.brdf' is created by CMD1
AlwaysBuild(cmd2)
env.Alias('tests', cmd2)

cmd3 = make_command_test('brdf2gnuplot', [ '--data-file', test_file,
                                           '--input',
                                           test_byproduct('Kirby.brdf'),
                                           '--output',
                                           test_byproduct('Kirby.dat') ],
                         'gnuplot-export')

env.Depends(cmd3, cmd1)         # 'Kirby.brdf' is created by CMD1
AlwaysBuild(cmd3)
env.Alias('tests', cmd3)

cmd4 = make_command_test('brdf2brdf', [ '--input',
                                        test_byproduct('Kirby.brdf'),
                                        '--output',
                                        test_byproduct('Kirby.m'),
                                        '--export', 'matlab' ],
                         'matlab-export')
env.Depends(cmd4, cmd1)         # 'Kirby.brdf' is created by CMD1
AlwaysBuild(cmd4)
env.Alias('tests', cmd4)

def download_gold_metallic_paint(target, source, env):
  url = 'http://people.csail.mit.edu/wojciech/BRDFDatabase/brdfs/gold-metallic-paint.binary'
  sha256 = '69c493d7f36fa5267d15948a616056f9bc84e352ec6db49b64afe6ff232e27d6'
  target = str(target[0])

  print "downloading '" + target + "' from '" + url + "'"
  print "this will take some time..."
  obtain.download(url, target)
  return obtain.check_integrity(target, sha256)

download = env.Command(test_output_directory + '/gold-metallic-paint.binary',
                       None, download_gold_metallic_paint)

# Prevent 'scons -c' from removing this file since downloading it
# takes ages.
download.noclean = True

if have_openexr:
  cmd5 = make_command_test('data2data',
                           ['--input',
                            test_byproduct('gold-metallic-paint.binary'),
                            '--in-data', 'data_merl',
                            '--output',
                            test_byproduct('gold-metallic-paint.exr'),
                            '--out-data', 'data_brdf_slice'],
                           'exr-export')
  env.Depends(cmd5, cmd1)
  env.Depends(cmd5, download)
  AlwaysBuild(cmd5)
  env.Alias('tests', cmd5)

  cmd6 = make_command_test('data2data',
                           ['--input',
                            test_byproduct('gold-metallic-paint.exr'),
                            '--in-data', 'data_brdf_slice',
                            '--output',
                            test_byproduct('gold-metallic-paint.data')],
                           'exr-to-internal')
  env.Depends(cmd6, cmd5)
  AlwaysBuild(cmd6)
  env.Alias('tests', cmd6)

  cmd7 = make_command_test('data2brdf',
                           ['--input',
                            test_byproduct('gold-metallic-paint.data'),
                            '--output',
                            test_byproduct('gold-metallic-pain.brdf'),
                            '--func', 'rational_function_chebychev',
                            '--fitter', 'rational_fitter_leastsquare',
                            '--np', '100', '--nq', '50'],
                           'least-square-fit')
  env.Depends(cmd7, cmd6)
  AlwaysBuild(cmd7)
  env.Alias('tests', cmd7)

# Always run all the tests upon 'scons tests'.
AlwaysBuild("tests")
