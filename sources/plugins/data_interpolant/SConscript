Import('env')
env = env.Clone()

env.AppendUnique(LIBS    = env['PLUGIN_LIB'])

build_lib = False

test_env = env
test_env.AppendUnique(LIBS    = env['FLANN_LIB'])
test_env.AppendUnique(LIBPATH = env['FLANN_DIR'])
test_env.AppendUnique(CPPPATH = env['FLANN_INC'])

conf = Configure(test_env)
if conf.CheckLibWithHeader(env['FLANN_LIB'], 'flann/flann.hpp', 'CXX'):
   build_lib = True
   env.AppendUnique(LIBS    = env['FLANN_LIB'])
   env.AppendUnique(LIBPATH = env['FLANN_DIR'])
   env.AppendUnique(CPPPATH = env['FLANN_INC'])
#end

test_env = conf.Finish()

test_env = env
test_env.AppendUnique(LIBS    = env['CGAL_LIB'])
test_env.AppendUnique(LIBPATH = env['CGAL_DIR'])
test_env.AppendUnique(CPPPATH = env['CGAL_INC'])

conf = Configure(test_env)
if conf.CheckLibWithHeader(env['CGAL_LIB'], 'flann/flann.hpp', 'CXX'):
   build_lib = True
   env.AppendUnique(LIBS    = env['CGAL_LIB'])
   env.AppendUnique(LIBPATH = env['CGAL_DIR'])
   env.AppendUnique(CPPPATH = env['CGAL_INC'])
#end

env = conf.Finish()

if build_lib:
   sources = ['data.cpp']
   env.SharedLibrary('../../build/data_interpolant', sources)
#end
