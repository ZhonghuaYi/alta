import SCons.Warnings as W

Import('env')
env = env.Clone()
	
env.AppendUnique(LIBS    = env['PLUGIN_LIB'])
env.AppendUnique(LIBS    = env['CERES_LIB'])
env.AppendUnique(LIBPATH = env['CERES_DIR'])
env.AppendUnique(CPPPATH = env['CERES_INC'])

build_lib = False

conf = Configure(env)

if conf.CheckLibWithHeader(env['CERES_LIB'], 'ceres/ceres.h', 'c++'):

	for lib in env['CERES_OPT_LIB']:		
		if conf.CheckLib(lib):
			env.AppendUnique(LIBS = lib)
		else:
			W.warn(W.WarningOnByDefault, "could not find library " + lib)

	build_lib = True
else:
	W.warn(W.WarningOnByDefault, "unable to find CERES headers or libraries")

env = conf.Finish()

if build_lib:
	sources = ['fitter.cpp']
	env.SharedLibrary('../../build/nonlinear_fitter_ceres', sources)
#end
