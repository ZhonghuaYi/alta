# Plug-ins.
Import('env')
import os

plugins = [ 'data_interpolants',
            'data_io',

            # Building nonlinear fitters.
            'nonlinear_fitter_ceres',
            'nonlinear_fitter_nlopt',
            'nonlinear_fitter_ipopt',
            'nonlinear_fitter_eigen',

            # Building nonlinear functions.
            'nonlinear_function_diffuse',
            'nonlinear_function_beckmann',
            'nonlinear_function_abc',
            'nonlinear_function_blinn',
            'nonlinear_function_isotropic_lafortune',
            'nonlinear_function_sgd',
            'nonlinear_function_ward',

            # Building nonlinear masking functions.
            'nonlinear_shadowing_smith',
            'nonlinear_shadowing_walter_smith',

            # Building nonlinear Fresnel functions.
            'nonlinear_fresnel_schlick',
            'nonlinear_fresnel_normalized_schlick',

            # Building rational fitters.
            'rational_fitter_eigen',
            'rational_fitter_leastsquare',
            'rational_fitter_quadprog',
            'rational_fitter_parallel',
            'rational_fitter_matlab',

            # Building rational functions.
            'rational_function_legendre',
            'rational_function_chebychev',
            'rational_function_cosine',

            # Building retro functions.
            'nonlinear_function_retroblinn',
            'nonlinear_function_retroyoo',
            'nonlinear_function_retrobeckmann',
            'nonlinear_fresnel_retroschlick' ]

def build_plugin(directory):
  return directory, SConscript(directory + '/SConscript')

def display_status(status):
  name, status = status
  print "    " + name

def display_target(target):
  print "    " + os.path.basename(target.abspath)

def is_built(status):
  _, status = status
  return status

def is_not_built(status):
  _, status = status
  return not status

def status_targets(status):
  directory, targets = status
  return targets

# Build them all!
status = map(build_plugin, plugins)

# SConscript files of individual directories return a list of targets,
# because each directory may build several plugins.
targets = map(status_targets, status)

if not GetOption('silent') and not GetOption('clean'):
  print ""
  print "***** Summary of the plug-ins being built *****"
  print ""
  print "  The following plug-ins are built:"

  # Here we display a list of plugins.
  map(display_target, reduce(lambda x, y: x + y, targets, []))
  print ""

  omitted=filter(is_not_built, status)
  if len(omitted) > 0:
    print "  The following directories are *not* built:"

    # Here we display a list of directories, not plugins.  We don't
    # have access to the plugins that have been omitted, in the case
    # of directories that contain several plugins.  (FIXME)
    map(display_status, omitted)
    print ""
    print "  See 'config.log' for details."
    print ""

env.Install(env['INSTALL_PREFIX'] + '/lib/alta', targets)
