import sys
import SCons.Errors as Errors

Import('env', 'library_available')
env = env.Clone()
env.Prepend(LIBS = ['core'])

## Building a test function for boost::python
##
bp_test_source = """
// STL and Boost includes
#include <memory>
#include <boost/python.hpp>

// ALTA includes
#include <core/ptr.h>
#include <core/function.h>

int main(int argc, char** argv) {

	boost::python::class_<alta::function, alta::ptr<alta::function>, boost::noncopyable>("function", boost::python::no_init);
   boost::python::register_ptr_to_python<alta::ptr<alta::function>>();

   return 0;
}
"""

def CheckBoostPython(context):
   context.Message('Checking boost::python using small example...')
   result = context.TryLink(bp_test_source, '.cpp')
   context.Result(result)
   return result


## Check whether Python 2.7 and boost::python are available.
## The small example above is also checked if the two libraries are present.
##
build_lib = False
if library_available(env, pkgspec='python-2.7',
                     inc_var='PYTHON_INC', lib_var='PYTHON_DIR',
                     lib='PYTHON_LIB', header='Python.h'):

  conf = Configure(env, custom_tests = {'CheckBoostPython' : CheckBoostPython})

  # On GNU/Linux the '-mt' suffix is no longer used, but it is still
  # used on some other platforms (see
  # <http://stackoverflow.com/questions/2293962/boost-libraries-in-multithreading-aware-mode>.)
  build_lib = conf.CheckLibWithHeader('boost_python-mt',
                                      'boost/python.hpp', 'c++')
  if not build_lib:
    build_lib = conf.CheckLibWithHeader('boost_python',
                                        'boost/python.hpp', 'c++')

  build_lib = conf.CheckBoostPython();
  env = conf.Finish()


## Build the python wrapper if checks are good
##
if build_lib:
  env['SHLIBPREFIX']=''
  if sys.platform == 'darwin':
    # On Darwin, the extension would be '.dylib', but Python insists
    # on search for '.so', so force this extension.
    env['SHLIBSUFFIX'] = '.so'

  env.Alias('python',
            env.SharedLibrary('#build/python/alta', ['alta.cpp']))
else:
  env.Alias('python', [])
#  raise Errors.BuildError(errstr = "Unable to build the Python wrapper",
#                          filename = 'alta.cpp',
#                          exitstatus = 1)
