import sys

Import('env', 'library_available')
env = env.Clone()

build_lib = False

# Check whether Python 2.7 and Boost.Python are available.
if library_available(env, pkgspec='python-2.7',
                     inc_var='PYTHON_INC', lib_var='PYTHON_DIR',
                     lib='PYTHON_LIB', header='Python.h'):
  # Check if OpenMP is available
  if env['OPENMP_LINKFLAGS']:
    env.AppendUnique(CCFLAGS = env['OPENMP_CFLAGS'])
    env.AppendUnique(LINKFLAGS = env['OPENMP_LINKFLAGS'])

  conf = Configure(env)

  # On GNU/Linux the '-mt' suffix is no longer used, but it is still
  # used on some other platforms (see
  # <http://stackoverflow.com/questions/2293962/boost-libraries-in-multithreading-aware-mode>.)
  build_lib = conf.CheckLibWithHeader('boost_python-mt',
                                      'boost/python.hpp', 'c++')
  if not build_lib:
    build_lib = conf.CheckLibWithHeader('boost_python',
                                        'boost/python.hpp', 'c++')

  # On GNU/Linux the '-mt' suffix is no longer used, but it is still
  # used on some other platforms (see
  # <http://stackoverflow.com/questions/2293962/boost-libraries-in-multithreading-aware-mode>.)
  build_lib = conf.CheckLibWithHeader('boost_python-mt',
                                      'boost/python.hpp', 'c++')
  if not build_lib:
    build_lib = conf.CheckLibWithHeader('boost_python',
                                        'boost/python.hpp', 'c++')

  env = conf.Finish()

if build_lib:
  env.Prepend(LIBS = ['core'])

  env['SHLIBPREFIX']=''
  if sys.platform == 'darwin':
    # On Darwin, the extension would be '.dylib', but Python insists
    # on search for '.so', so force this extension.
    env['SHLIBSUFFIX'] = '.so'

  env.Alias('python',
            env.SharedLibrary('#build/python/alta', ['alta.cpp']))
else:
  print "<<ERROR>> Unable to build the Python interface, please install boost-python"
  print "          or check your configuration."
